#!/usr/bin/env ruby
# -*- mode: ruby -*-
require 'json'
require 'open3'
require 'ruby-debug'
require 'hipe-core/interfacey'
require 'hipe-core/struct/table'

module Hipe
  class Visiting
    include Interfacey::Service
    interface.might do
      speaks :cli
      describe <<-desc
        This this is an experimental hack to achieve something like
        svn:externals but only for a subset of files
      desc
      responds_to "help", "page << self", :aliases=>['-h','--help','-h']
      default_request "help"
      responds_to "list", "show list of visiting files"
      responds_to "diff", "show a diff from target to source of all files"
      responds_to("copy", "copy files over -- no undo!") do
        opts.on('-d','--dry', 'as dry run')
        opts.on('-f','--fast','no safey-catch sleeping thing')
      end
      responds_to("pull", "coming one day..")
    end

    def initialize
      @path = "./visiting.json"
    end

    Gash = Interfacey::AssociativeArray

    unless Gash.instance_methods(false).include?('inspect')
      Gash.send(:define_method,'inspect') do
        '{' + keys.map{|k| "#{k.inspect} => #{self[k].inspect}"} * ', ' + '}'
      end
    end

    module Json
      class HashViolence < Hash
        class Fail < RuntimeError; end
        attr_accessor :path
        def initialize(hash,path)
          self.path = path
          meta = class << self; self; end
          hash.each do |k,v|
            self[k] = v
            meta.send(:define_method, k){self[k]}
          end
        end
        def method_missing name, *args
          msg = %|There is no "#{name}" attribute at "#{path}".|
          if keys.size == 0
            msg << %|  This node has no children!|
          elsif keys.size < 8
            msg << %|  Available: #{keys.map{|x| x.inspect}*', '}?|
          end
          raise Fail.new(msg)
        end
      end

      KeyLike = /^([-a-z0-9_ ]+):$/
      module Unmarshal
        def self.hash json, path
          result = {}
          json.each do |k,v|
            child_path = %|#{path}/#{k}|
            result[k] = unmarshal v, child_path
          end
          HashViolence.new(result, path)
        end
        def self.array json, path
          ok = false
          len = json.length
          if (len % 2 == 0)
            ok = 0 == (0..len-2).step(2).map{|i| json[i]}.reject do |s|
              String === s && KeyLike =~ s
            end.length
          end
          if ok
            result = Gash.new.no_clobber.require_key
            (0..len-2).step(2) do |i|
              key = KeyLike.match(json[i]).captures[0]
              child_path = %|#{path}/#{key}|
              result[key] = unmarshal(json[i+1],child_path)
            end
            result.attr_accessors(*result.keys)
          else
            result = (0..len-1).map do |i|
              child_path = %|#{path}/[#{i}]|
              unmarshal json[i], child_path
            end
          end
          result
        end
        def self.unmarshal json, path
          meth = json.class.to_s.downcase
          respond_to?(meth) ? send(meth, json, path) : json
        end
      end
      def self.unmarshal json, path
        Unmarshal.unmarshal json, path
      end
    end

    def struct
      @struct ||= begin
        pre_struct = JSON.parse(File.read(@path))
        Json.unmarshal pre_struct, @path
      end
    end

    def file_pairs
      @file_pairs ||= begin
        file_pairs = []
        struct.list.each do |entry|
          next if entry["skip"]
          if entry["directory"]
            file_pairs_from_directory file_pairs, entry
          elsif entry["files"]
            file_pairs_from_files file_pairs, entry
          else
            file_pairs << [entry.file.source, entry.file.target]
          end
        end
        file_pairs
      end
      @file_pairs
    end

    def file_pairs_from_files file_pairs, entry
      entry.files.each do |file_node|
        file_pairs << [file_node.source, file_node.target]
      end
    end

    def file_pairs_from_directory file_pairs, entry
      dir = entry.directory
      re = nil
      replace = nil
      if entry["rename"]
        re = Regexp.new(entry.rename.search)
        replace = entry.rename.replace
      end
      entry.files.each do |file|
        if file.kind_of? String
          source = dir.source+file
          if re
            file_pairs << [source, dir.target+file.sub(re,replace)]
          else
            file_pairs << [source, dir.target+file]
          end
        elsif file.kind_of? Hash
          src_file  = dir.source + file.source
          dest_file = dir.target + file.target
          file_pairs << [src_file, dest_file]
        end
      end
    end


    def each_file_pair
      file_pairs.each do |pair|
        yield pair[0], pair[1]
      end
    end

    def list
      file_pairs = self.file_pairs
      table = Hipe::Table.make do
        self.name = 'visiting files'
        field(:source){|x| x[0]}
        field(:target){|x| x[1]}
        self.list = file_pairs
      end
      table.render(:ascii)
    end
    def sync opts
    end

    def diff
      missing = []
      each_file_pair do |src, tgt|
        missing << src unless File.exist?(src)
        missing << tgt unless File.exist?(tgt)
      end
      return error("missing files:\n" + missing * "\n") if missing.size > 0
      each_file_pair do |src, tgt|
        Open3.popen3('diff', tgt, src) do |sin, sout, serr|
          $stdout.puts "this is the diff between #{tgt} and #{src}"
          out = sout.read.strip
          err = serr.read.strip
          return error(err) unless ""==err
          $stdout.puts out
        end
      end
      ''
    end

    def copy opts
      puts "copying "+file_pairs.size.to_s+" files over"
      each_file_pair do |src, tgt|
        file_exists(src) or return error
        file_exists(File.dirname(tgt)+'/') or return error
        fake_command = "copy #{src} #{tgt}"
        if File.exist?(tgt) && File.read(tgt)==File.read(src)
          puts "no difference: #{src} #{tgt}"
        elsif opts.dry
          puts fake_command
        else
          puts fake_command
          FileUtils.copy(src, tgt)
        end
        sleep(0.67) unless opts.fast
      end
      'done.'
    end

    def file_exists path
      if ! File.exist? path
        error("File does not exist: #{path}")
        false
      else
        true
      end
    end

    def error(msg=nil)
      if (msg)
        @last_err_msg = msg
        return Interfacey::ResponseLite.new(:error => msg)
      else
        return Interfacey::ResponseLite.new(:error=>
          %|error: "#{@last_err_msg}"|
        )
      end
    end
  end
end

puts Hipe::Visiting.new.cli_run(ARGV) if $PROGRAM_NAME == __FILE__
